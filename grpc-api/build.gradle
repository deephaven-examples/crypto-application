import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

plugins {
    id 'io.deephaven.crypto.java-library-conventions'
    id 'com.bmuschko.docker-remote-api' version '7.1.0'
}

String deephavenCoreVersion = project.property('deephaven-core.version')
String base = project.property('grpc-api.base')
String image = project.property('grpc-api.image')
def labels = [ 'maintainer': project.property('maintainer') ] + project.properties.findAll { it -> it.key.startsWith('org.opencontainers.image.') }

dependencies {
    api project(':common')

    // To be provided by the DH environment
    compileOnly "io.deephaven:deephaven-table-api:${deephavenCoreVersion}"
    compileOnly "io.deephaven:deephaven-qst:${deephavenCoreVersion}"
}

def dockerfileDest = project.layout.buildDirectory.file('docker/Dockerfile')
def dockerfileDir = project.layout.buildDirectory.dir('prepareDocker')
def imageIdFile = project.layout.buildDirectory.file('.docker/imageId.txt').get().asFile
def imageId = imageIdFile.exists() ? imageIdFile.text : null


def createDockerfile = project.tasks.register('createDockerfile', Dockerfile) {
    it.from base
    it.copyFile 'libs/', '/app/libs'
    it.copyFile 'app.d/', '/app.d'
    it.label(labels)
    it.destFile.set dockerfileDest
}

def prepareDocker = project.tasks.register('prepareDocker', Sync) {
    it.dependsOn createDockerfile
    it.from dockerfileDest
    it.from('src/main/app.d') {
        into 'app.d'
    }
    it.from(configurations.runtimeClasspath) {
        into 'libs'
    }
    it.from(jar) {
        into 'libs'
    }
    it.into dockerfileDir
}

def buildImage = project.tasks.register('buildImage', DockerBuildImage) {
    it.dependsOn prepareDocker
    it.inputDir.set dockerfileDir
    it.imageIdFile.set imageIdFile
    it.images.add(image)
}

project.tasks.register('deleteImage', DockerRemoveImage) {
    it.onlyIf { imageId != null }
    it.imageId.set imageId
    it.force.set true
    it.onError { exception ->
        if (!exception.message.contains('No such image'))
            throw exception
    }
    it.doLast {
        imageIdFile.delete()
    }
}

project.tasks.register('pushImage', DockerPushImage) {
    DockerBuildImage buildImageTask = buildImage.get()
    it.dependsOn buildImageTask
    it.inputs.files buildImageTask.outputs.files
    it.images.add(image)
}

assemble.dependsOn buildImage
